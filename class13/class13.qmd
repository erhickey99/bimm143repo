---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Emily Hickey (A15575724)"
format: html
---

## Bioconductor setup

```{r}
#install.packages("BiocManager")`
#BiocManager::install("DESeq2")
```

```{r}
library(DESeq2)
```

## Import countData and colData

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with **dexamethasone** (dex) 

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
head(counts)
head(metadata)
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```

## Toy differential gene 

Let's start by calculating the mean counts per gene in the "control" samples. We can then compare this value for each gene to the mean counts in the "treated" samples (i.e. columns).

Step 1. Find which columns in `counts` correspond to "control" samples.
Step 2. Calculate the mean value per gene in these columns.
Step 3. Store my answer for later in `control.mean`

```{r}
control.inds <- metadata$dex == "control"
```

```{r}
metadata[control.inds,]
```
```{r}
control.counts <- counts[,control.inds]
head(control.counts)
```

```{r}
#apply(control.counts, 1, mean)
control.mean<- rowMeans(control.counts)
head(control.mean)
```

>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

We could use the rowSums function.

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds<- metadata$dex == "treated"
```

```{r}
metadata[treated.inds,]
```

```{r}
treated.counts <- counts[,treated.inds]
head(treated.counts)
```

```{r}
treated.mean<- rowMeans(treated.counts)
head(treated.mean)
```

```{r}
#alternative way
#treated.inds <- rowMeans(counts[,metadata$dex == "treated])
```

To keep us tidy lets put `control.mean` and `treated.mean` vectors together as two columns of a new data.frame.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

And a ggplot version:

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha= 0.2)
```

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```

Log transformations are super useful when our data is skewed and measured over a wide range like this. We can use different log transformations like base10 or natural logs but we most often prefer log2 units.

```{r}
#Treated/Control
log2(10/10)
```

What if there was a doubling?
```{r}
#Treated/Control
log2(20/10)
```

Half counts
```{r}
#Treated/Control
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
log10(40/10)
```

Lets add a log2 fold-change column to out little `meancounts` data.frame:

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                             meancounts$control.mean)
head(meancounts)
```

```{r}
to.rm.inds <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm.inds,]
head(mycounts)
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

We want to return both the row and column indices for TRUE values. This will tell us which genes and samples have 0 counts. This way we can ignore any genes that have 0 counts in any sample. This way we can focus on the row answer. The `unique()` ensures no row is counted twice if it has zero entries for both samples. 

The `!` mark flips TRUE values to FALSE and vice-versa...

```{r}
x <- c(TRUE, FALSE, TRUE)
!x
```

```{r}
x
which(x)
```

```{r}
dim(mycounts)
```

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. 

Let’s filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

>Q10. Do you trust these results? Why or why not?

No because we have not yet accounted for statistical significance of the differences.

## Setting up for DESeq

Like any package we must load it up with a `library()` call.

```{r}
library(DESeq2)
citation("DESeq2")
```

Setup the input required by DESeq
```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
```

```{r}
dds
```

##Principal Component Analysis (PCA)

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
library(ggplot2)
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

## DESeq analysis 

Now we can run our DESeq analysis
```{r}
dds <- DESeq(dds)
```

Get our results back from the `dds` object
```{r}
res <- results(dds)
head(res)
```

## A summary results plot

Volcano plot.
This is a common type of summary figure that keeps both our inner biologist and inner stats nerd happy because it shows both P-values and Log2 (Fold-Changes).

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=2, col="red")
abline(v=-2, col="red")
abline(h=-log(0.05), col="blue")
```

```{r}
log(0.1)
log(0.01)
```

Save our results to date

```{r}
write.csv(res, file="deseq_results.csv")
```

## Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main function we will use here is called `mapIds()` 

Our current IDs are here:
```{r}
#mapIds()
head(row.names(res))
```

These are in Ensembl format.I want "SYMBOL" ids: 
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

Let;s add GENENAME
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")
head(res)
```

```{r}
res$entrez <-  mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
head(res)
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")
head(res)
```

## Pathway analysis 

```{r}
library(pathview)
library(gage)
library(gageData)
```

Lets have a peak
```{r}
data(kegg.sets.hs)
# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

What we need from `gage()` is our genes in ENTREZ id format with a measure of their importance

It wants a vector of e.g. fold-changes

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

Add ENTREZ Ids as `names()` to my `foldchanges()` vector.

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now we can run `gage()` with this input vector abd the geneset we want to examine for overlap/enrichment...

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Look at the results
```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

We can view these pathways with our geneset genes highlighted using the `pathview()` function. E.g. for "Asthma" I will use pathway.id hsa05310 as seen above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![My genes invovled in Asthma pathway](hsa05310.pathview.png)
